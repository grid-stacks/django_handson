version: '3.8'

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: handson_local_django
    container_name: handson_django
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    expose:
      - 8000
    command: /start
    volumes:
      - .:/app:z
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
      - mailhog
    networks:
      - handson_net

  celeryworker:
    <<: *django
    image: handson_local_celeryworker
    container_name: handson_celeryworker
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: [ ]
    command: /start-celeryworker
    networks:
      - handson_net

  celerybeat:
    <<: *django
    image: handson_local_celerybeat
    container_name: handson_celerybeat
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: [ ]
    command: /start-celerybeat
    networks:
      - handson_net

  flower:
    <<: *django
    image: handson_local_flower
    container_name: handson_flower
    ports:
      - "5555:5555"
    command: /start-flower
    networks:
      - handson_net

  postgres:
    build:
      context: .
      dockerfile: ./compose/local/postgres/Dockerfile
    image: handson_local_postgres
    container_name: handson_postgres
    restart: always
    env_file:
      - ./.envs/.local/.postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - postgres_data_backups:/backups:z
    networks:
      - handson_net

  adminer:
    image: adminer
    container_name: handson_adminer
    restart: always
    ports:
      - "9090:8080"
    depends_on:
      - postgres
    networks:
      - handson_net

  mailhog:
    image: mailhog/mailhog
    container_name: handson_mailhog
    ports:
      - "8025:8025"
    networks:
      - handson_net

  redis:
    image: redis
    container_name: handson_redis
    hostname: redis
    networks:
      - handson_net

  redis-commander:
    container_name: handson_commander
    hostname: redis-commander
    image: rediscommander/redis-commander
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8030:8081"
    networks:
      - handson_net

  redis-lab:
    image: "redislabs/redismod"
    container_name: handson_lab
    ports:
      - "6380:6379"
    volumes:
      - ./data:/data
    entrypoint: >
      redis-server
        --loadmodule /usr/lib/redis/modules/redisai.so
          ONNX redisai_onnxruntime/redisai_onnxruntime.so
          TF redisai_tensorflow/redisai_tensorflow.so
          TFLITE redisai_tflite/redisai_tflite.so
          TORCH redisai_torch/redisai_torch.so
        --loadmodule /usr/lib/redis/modules/redisearch.so
        --loadmodule /usr/lib/redis/modules/redisgraph.so
        --loadmodule /usr/lib/redis/modules/redistimeseries.so
        --loadmodule /usr/lib/redis/modules/rejson.so
        --loadmodule /usr/lib/redis/modules/redisbloom.so
        --appendonly yes
    # redisgears is creating issue to start container
    # --loadmodule /var/opt/redislabs/lib/modules/redisgears.so
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - handson_net

  redisinsight:
    image: redislabs/redisinsight
    container_name: handson_insight
    ports:
      - "8035:8001"
    volumes:
      - ./insight_data:/data
    networks:
      - handson_net

  prometheus:
    image: prom/prometheus
    container_name: handson_prometheus
    restart: unless-stopped
    volumes:
      - ./compose/local/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9095:9090"
    networks:
      - handson_net

  grafana:
    image: grafana/grafana
    container_name: handson_grafana
    volumes:
      - grafana_storage:/var/lib/grafana
    ports:
      - "3050:3000"
    networks:
      - handson_net

  nginx:
    build:
      context: .
      dockerfile: ./compose/local/nginx/Dockerfile
    image: handson_local_nginx
    container_name: handson_nginx
    ports:
      - "1300:80"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    networks:
      - handson_net
    depends_on:
      - django

volumes:
  postgres_data:
  postgres_data_backups:
  prometheus_data:
  grafana_storage:
  static_volume:
  media_volume:
  data:
  insight_data:

networks:
  handson_net:
    driver: bridge